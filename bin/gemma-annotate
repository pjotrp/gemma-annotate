#! /usr/bin/env ruby

# gemma-wrapper
# Author:: Pjotr Prins
# License:: GPL3
#
# Copyright (C) 2018 Pjotr Prins <pjotr.prins@thebird.nl>

USAGE = "GEMMA annotate example:

    gemma-annotate --eval \"p_lrt < 1e-04\" --bed test/data/input/ucsc_mm10_uniprot.bed \\
        test/data/input/mouse_hs1940_CD8MCH_lmm.assoc.txt

"

basepath = File.dirname(File.dirname(__FILE__))
$: << File.join(basepath,'lib')

VERSION_FILENAME=File.join(basepath,'VERSION')
version = File.new(VERSION_FILENAME).read.chomp

require 'optionparser'
require 'json'

options = { show_help: false, source: 'https://github.com/genetics-statistics/gemma-annotate', version: version+' (Pjotr Prins)', date: Time.now.to_s }

opts = OptionParser.new do |o|
  o.banner = "Usage: #{File.basename($0)} [options]"

  o.on('--eval expr',String, "Evaluate expression to select SNPs (default all)") do |expr|
    options[:eval_expr] = expr
  end

  o.on('--value expr',String, "Evaluate expression to output value") do |expr|
    options[:eval_value] = expr
  end

  o.on('--bed filen',String, "Input BED annotation") do |filen|
    options[:bed] = filen
  end

  o.on("--q", "--quiet", "Run quietly") do |q|
    options[:quiet] = true
  end

  o.on("-v", "--verbose", "Run verbosely") do |v|
    options[:verbose] = true
  end

  o.on("--debug", "Show debug messages and keep intermediate output") do |v|
    options[:debug] = true
  end

  o.separator ""
  o.on_tail('-h', '--help', 'display this help and exit') do
    options[:show_help] = true
  end
end

opts.parse!(ARGV)

if options[:show_help] or ARGV.size == 0
  print opts
  print USAGE
  exit 1
end

p options if options[:debug]

if RUBY_VERSION =~ /^1/
  warning "runs on Ruby 2.x only\n"
end

bedfn = options[:bed]
raise "BED input file #{bedfn} does not exist" if !File.exist?(bedfn)
bed = {} # contains the BED records by chr
File.foreach(bedfn).with_index do |line, line_num|
  chr,pos1s,pos2s,anno = line.strip.split(/\t/)
  chr = chr.sub!(/chr/,"") # edit chr field
  pos1 = pos1s.to_i
  pos2 = pos2s.to_i
  bed[chr] = [] if not bed[chr]
  bed[chr] << [chr,pos1,pos2,anno]
end

header = {}

recs = []

ARGV.each do | fn |
  File.foreach(fn).with_index do |line, line_num|
    a = line.strip.split(/\t/)
    if a[0] == 'chr'
      header = {}
      a.each_with_index do | h,i |
        header[h] = i
      end
      p header if options[:debug]
      next
    end
    chr,snp,poss = a
    pos = poss.to_i
    # if search.call(chr,pos)
    expr = options[:eval_expr]
    if expr
      # p a[header['p_lrt']].to_f
      ps = pos
      rs = snp
      af = p_lrt = logl_H1 = l_lme = beta = se = p_wald = p_score = nil
      ['p_lrt','af','logl_H1','l_lme','beta','se','p_wald','p_score'].each { | var |
        if expr =~ /#{var}/
          eval "#{var} = a[header['#{var}']].to_f"
        end
      }
      n_miss = n_mis = n_obs = nil
      ['n_miss','n_mis','n_obs'].each { | var |
        if expr =~ /#{var}/
          eval "#{var} = a[header['#{var}']].to_i"
        end
      }
      allele0 = allele1 = nil
      ['allele0','allele1'].each { | var |
        if expr =~ /#{var}/
          eval "#{var} = a[header['#{var}']]"
        end
      }
      next if not eval(expr)
    end
    eval_value = options[:eval_value]
    rec = { chr: chr, pos: pos, name: snp}
    if eval_value
      rec[eval_value] = eval(eval_value)
    end
    # Now annotate from BED records - if this turns out to be slow use bsearch instead
    bed[chr].each do | chr,pos1,pos2,anno |
      if pos >= pos1 and pos <= pos2
        rec[:anno] = anno
      end
    end
    recs << rec
  end
end

print recs.to_json
