#! /usr/bin/env ruby

# gemma-wrapper
# Author:: Pjotr Prins
# License:: GPL3
#
# Copyright (C) 2018 Pjotr Prins <pjotr.prins@thebird.nl>

USAGE = "GEMMA annotate example:

    gemma-annotate --eval \"p_lrt < 1e-04\" --bed test/data/input/ucsc_mm10_uniprot.bed \\
        test/data/input/mouse_hs1940_CD8MCH_lmm.assoc.txt

"

basepath = File.dirname(File.dirname(__FILE__))
$: << File.join(basepath,'lib')

VERSION_FILENAME=File.join(basepath,'VERSION')
version = File.new(VERSION_FILENAME).read.chomp

require 'optionparser'

options = { show_help: false, source: 'https://github.com/genetics-statistics/gemma-annotate', version: version+' (Pjotr Prins)', date: Time.now.to_s }

opts = OptionParser.new do |o|
  o.banner = "Usage: #{File.basename($0)} [options]"

  o.on('--eval expr',String, "Evaluate expression to select SNPs (default all)") do |expr|
    options[:eval] = expr
  end

  o.on('--bed filen',String, "Input BED annotation") do |filen|
    options[:bed] = filen
  end

  o.on("--q", "--quiet", "Run quietly") do |q|
    options[:quiet] = true
  end

  o.on("-v", "--verbose", "Run verbosely") do |v|
    options[:verbose] = true
  end

  o.on("--debug", "Show debug messages and keep intermediate output") do |v|
    options[:debug] = true
  end

  o.separator ""
  o.on_tail('-h', '--help', 'display this help and exit') do
    options[:show_help] = true
  end
end

opts.parse!(ARGV)

if options[:show_help] or ARGV.size == 0
  print opts
  print USAGE
  exit 1
end

if RUBY_VERSION =~ /^1/
  warning "runs on Ruby 2.x only\n"
end

bedfn = options[:bed]
raise "BED input file #{bedfn} does not exist" if !File.exist?(bedfn)
bed = {} # contains the BED records by chr
File.foreach(bedfn).with_index do |line, line_num|
  chr,pos1s,pos2s,anno = line.strip.split(/\t/)
  chr = chr.sub!(/chr/,"") # edit chr field
  pos1 = pos1s.to_i
  pos2 = pos2s.to_i
  bed[chr] = [] if not bed[chr]
  bed[chr] << [chr,pos1,pos2,anno]
end

header = {}

ARGV.each do | fn |
  File.foreach(fn).with_index do |line, line_num|
    a = line.strip.split(/\t/)
    if a[0] = 'chr'
      header = {}
      a.each_with_index do | h,i |
        header[h] = i
      end
      p header
      exit 1
      next
    end
    p a
  end
end
